#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
trap 'echo "■ Error en la línea $LINENO"; exit 1' ERR

# ===============================================================
# functions_zsh – Instalación y configuración automática de ZSH
# ===============================================================

verify_zsh_in_shells() {
  local zsh_path
  zsh_path=$(command -v zsh || true)
  [[ -z "$zsh_path" ]] && return 0
  if ! grep -q "$zsh_path" /etc/shells; then
    echo "$zsh_path" | sudo tee -a /etc/shells >/dev/null
  fi
}

install_common_plugins() {
  log_section "🔌 Instalando plugins comunes de ZSH (Oh‑My‑ZSH custom)"
  local custom_plugins_path="/usr/share/oh-my-zsh/custom/plugins"
  try_cmd "Crear directorio de plugins" sudo mkdir -p "$custom_plugins_path"
  try_cmd "Permisos de plugins" sudo chmod 755 /usr/share/oh-my-zsh/custom -R

  local repos=(
    "https://github.com/hlissner/zsh-autopair.git"
    "https://github.com/zsh-users/zsh-autosuggestions.git"
    "https://github.com/zsh-users/zsh-completions.git"
    "https://github.com/zsh-users/zsh-history-substring-search.git"
    "https://github.com/zsh-users/zsh-syntax-highlighting.git"
    "https://github.com/MichaelAquilina/zsh-you-should-use.git"
    "https://github.com/Aloxaf/fzf-tab.git"
  )
  for repo in "${repos[@]}"; do
    local name
    name=$(basename "$repo" .git)
    if [[ -d "$custom_plugins_path/$name" ]]; then
      try_cmd "Actualizar plugin $name" sudo git -C "$custom_plugins_path/$name" pull --quiet
    else
      try_cmd "Clonar plugin $name" sudo git clone --depth=1 --quiet "$repo" "$custom_plugins_path/$name"
    fi
  done
  try_cmd "Renombrar you-should-use" sudo mv -f "${custom_plugins_path}/zsh-you-should-use" "${custom_plugins_path}/you-should-use" || true
  log_success "Plugins comunes instalados/actualizados"
}

_install_zsh_for() {
  local user="$1"
  local home_dir="$2"
  local sudo_prefix="$3"

  log_section "🐚 Instalando ZSH para $user"

  try_cmd "Crear estructura de directorios" ${sudo_prefix}mkdir -p       "$home_dir/.config" "$home_dir/.cache/zsh" "$home_dir/.local/share/zsh"

  # Backup zshrc
  if [[ -f "$home_dir/.zshrc" ]]; then
    try_cmd "Backup .zshrc existente" ${sudo_prefix}mv -f "$home_dir/.zshrc" "$home_dir/.zshrc.backup.$(date +%F)"
  fi

  # Oh‑My‑ZSH
  if [[ -d "$home_dir/.oh-my-zsh" ]]; then
    try_cmd "Actualizar Oh‑My‑ZSH" ${sudo_prefix}git -C "$home_dir/.oh-my-zsh" pull --quiet
  else
    try_cmd "Clonar Oh‑My‑ZSH" ${sudo_prefix}git clone --depth=1 --quiet https://github.com/ohmyzsh/ohmyzsh.git "$home_dir/.oh-my-zsh"
  fi

  # Dotfiles .zshrc
  if [[ -f "${SCRIPT_DIR}/../../dotfiles/.zshrc" ]]; then
    try_cmd "Copiar .zshrc" ${sudo_prefix}cp -f "${SCRIPT_DIR}/../../dotfiles/.zshrc" "$home_dir/.zshrc"
  else
    # Minimal zshrc
    ${sudo_prefix}bash -c "cat > '$home_dir/.zshrc' <<'EOF'
export ZSH="\$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"
plugins=(git sudo)
source \$ZSH/oh-my-zsh.sh
EOF"
  fi

  # Starship config
  if command -v starship &>/dev/null; then
    try_cmd "Config Starship" ${sudo_prefix}sh -c "echo 'eval "\\$(starship init zsh)"' >> '$home_dir/.zshrc'"
  fi

  ${sudo_prefix}chown -R "$user:$user" "$home_dir/.oh-my-zsh" "$home_dir/.zshrc" "$home_dir/.config" "$home_dir/.cache" || true
  verify_zsh_in_shells
  try_cmd "Cambiar shell $user -> zsh" ${sudo_prefix}chsh -s "$(command -v zsh)" "$user"
  log_success "ZSH configurado para $user"
}

install_zsh_user() {
  _install_zsh_for "$(whoami)" "$HOME" ""
}

install_zsh_root() {
  if sudo -n true 2>/dev/null; then
    _install_zsh_for "root" "/root" "sudo "
  else
    log_warn "No hay privilegios sudo para configurar ZSH en root, se omite."
  fi
}

install_zsh_main() {
  log_section "🚀 Instalación total de ZSH (user + root)"
  try_cmd "Instalar paquetes base" sudo dnf install -y zsh git wget curl fzf util-linux-user starship
  install_common_plugins
  install_zsh_user
  install_zsh_root
  log_success "✨ ZSH completamente instalado y configurado"
}
