#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
trap 'echo "■ Error en la línea $LINENO"; exit 1' ERR
source "$(dirname "${BASH_SOURCE[0]}")/functions_zsh"

install_cli_tools() {
  log_section "🧰 Instalación de CLI Tools modernas"

  local cli_list="${SCRIPT_DIR}/sources/lists/cli_tools.list"

  if [[ ! -f "$cli_list" ]]; then
    log_error "Archivo de lista no encontrado: $cli_list"
    return 1
  fi

  install_packages "$cli_list" || log_warn "Algunas CLI tools no se pudieron instalar completamente"

  log_success "✅ CLI Tools instaladas correctamente"
  configure_cli_tools
}

# ─── CLI Tools Configuration ────────────────────────────────────────


configure_cli_tools() {
  log_section "⚙️ Configuración de CLI Tools"

  local dotfiles_dir="${SCRIPT_DIR}/../../dotfiles"
  mkdir -p ~/.config

  if [[ -f "$dotfiles_dir/.zshrc" ]]; then
    cp -f "$dotfiles_dir/.zshrc" ~/.zshrc
    log_success ".zshrc personalizado aplicado"
  fi

  if command -v fastfetch &>/dev/null && [[ -f "$dotfiles_dir/fastfetch_config.jsonc" ]]; then
    mkdir -p ~/.config/fastfetch
    cp -f "$dotfiles_dir/fastfetch_config.jsonc" ~/.config/fastfetch/config.jsonc
    log_success "Configuración de fastfetch aplicada"
  fi

  if [[ -f "$dotfiles_dir/topgrade.toml" ]]; then
    mkdir -p ~/.config
    cp -f "$dotfiles_dir/topgrade.toml" ~/.config/topgrade.toml
    log_success "Configuración de topgrade aplicada"
  fi

  if command -v bat &>/dev/null || command -v batcat &>/dev/null; then
    mkdir -p ~/.config/bat
    echo '--theme="TwoDark"' > ~/.config/bat/config
    log_success "Configuración de bat aplicada"
  fi

  if command -v zoxide &>/dev/null; then
    grep -q 'zoxide init' ~/.zshrc || echo 'eval "$(zoxide init zsh)"' >> ~/.zshrc
    log_success "zoxide integrado en .zshrc"
  fi

  if command -v navi &>/dev/null; then
    mkdir -p ~/.config/navi
    if [[ ! -d ~/.config/navi/cheats ]]; then
      git clone https://github.com/denisidoro/cheat.sh.git ~/.config/navi/cheats         && log_success "Cheatsheets de navi instalados"
    else
      log_info "Cheatsheets de navi ya presentes"
    fi
    grep -q 'navi widget zsh' ~/.zshrc || echo 'eval "$(navi widget zsh)"' >> ~/.zshrc
  fi

  ensure_zsh_as_default
  log_success "🎯 Configuración personalizada de CLI Tools completada"
  if [[ -f "$dotfiles_dir/.nanorc" ]]; then
    cp -f "$dotfiles_dir/.nanorc" ~/.nanorc
    log_success ".nanorc personalizado aplicado"
  fi
}

# ─── Ensure ZSH is Default Shell ────────────────────────────────────


ensure_zsh_as_default() {
  log_section "🔁 Configuración del shell por defecto: ZSH"

  if [[ "$SHELL" != *"zsh" ]]; then
    local zsh_path
    zsh_path=$(command -v zsh)

    if [[ -x "$zsh_path" ]]; then
      log_info "Estableciendo ZSH como shell por defecto para el usuario: $USER"
      chsh -s "$zsh_path" "$USER" && log_success "ZSH configurado como shell por defecto"
    else
      log_error "ZSH no está disponible como ejecutable. No se puede aplicar chsh."
    fi
  else
    log_info "ZSH ya es el shell por defecto"
  fi
}


configure_konsole() {
  log_section "🎨 Configuración de Konsole (terminal KDE)"

  local config_src="${SCRIPT_DIR}/../../dotfiles"

  # Descargar e instalar temas de Konsole
  try_cmd "Descargar temas de Konsole" \
    sudo wget -q https://github.com/gabrielomana/color_schemes/raw/main/konsole.zip -O /tmp/konsole.zip

  try_cmd "Descomprimir e instalar temas de Konsole" \
    unzip -o /tmp/konsole.zip -d /tmp/ && \
    sudo mkdir -p /usr/share/konsole && \
    sudo cp -rf /tmp/konsole/* /usr/share/konsole/

  try_cmd "Eliminar archivos temporales de temas" sudo rm -rf /tmp/konsole /tmp/konsole.zip

  # Aplicar configuración personalizada si existen
  try_cmd "Configurar konsolerc" cp -f "$config_src/konsolerc" ~/.config/konsolerc
  try_cmd "Configurar konsole.profile" mkdir -p ~/.local/share/konsole && cp -f "$config_src/konsole.profile" ~/.local/share/konsole/

  log_success "✅ Konsole configurado correctamente"
}



install_system_fonts() {
  log_section "🔤 Instalación de fuentes del sistema (DNF + Nerd Fonts)"

  echo "INSTALL SYSTEM CORE FONTS:"
  echo " - Google / Microsoft / Noto / Fira Code (vía DNF)"
  echo " - Nerd Fonts parcheadas desde GitHub"
  sleep 2

  local temp_dir="/tmp/nerd_fonts"
  local install_dir="/usr/share/fonts/nerd_fonts"
  local dotfiles_dir="${SCRIPT_DIR}/../../dotfiles"
  local font_names=("JetBrainsMono" "Ubuntu" "Mononoki" "Hack")

  mkdir -p "$temp_dir"

  for font_name in "${font_names[@]}"; do
    local url="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/${font_name}.zip"
    log_info "Descargando Nerd Font: $font_name"
    wget -O "$temp_dir/${font_name}.zip" "$url"
    unzip -o "$temp_dir/${font_name}.zip" -d "$temp_dir/$font_name"
  done

  sudo mkdir -p "$install_dir"
  for font_name in "${font_names[@]}"; do
    sudo mv "$temp_dir/$font_name"/*.{ttf,otf} "$install_dir/" 2>/dev/null || true
  done

  local fonts_list="${SCRIPT_DIR}/sources/lists/fonts.list"
  if [[ -f "$fonts_list" ]]; then
    install_packages "$fonts_list"
  else
    log_warn "fonts.list no encontrado, se omite instalación DNF de fuentes"
  fi

  if [[ -f "$dotfiles_dir/fonts.conf" ]]; then
    sudo cp -f "$dotfiles_dir/fonts.conf" /etc/fonts/fonts.conf
    log_success "fonts.conf personalizado aplicado"
  fi

  sudo rm -rf "$temp_dir"
  sudo fc-cache -fv

  log_success "✅ Fuentes del sistema y Nerd Fonts instaladas correctamente"
}

