#!/usr/bin/env bash

install_zsh_main() {
  log_section "üöÄ Instalaci√≥n total de ZSH (user + root)"
  try_cmd "Instalar paquetes base" sudo dnf install -y zsh git wget curl fzf util-linux-user starship
  install_common_plugins
  install_zsh_user
  install_zsh_root
  log_success "‚ú® ZSH completamente instalado y configurado"
  log_warn "‚ÑπÔ∏è Para aplicar los cambios, ejecuta: exec zsh o reinicia la terminal"
}

install_zsh_user() {
  _install_zsh_for "$(whoami)" "$HOME" ""
}

install_zsh_root() {
  if sudo -n true 2>/dev/null; then
    _install_zsh_for "root" "/root" "sudo "
  else
    log_warn "‚ö†Ô∏è No hay privilegios sudo para configurar ZSH en root, se omite."
  fi
}

install_common_plugins() {
  log_section "üîå Instalando plugins comunes de ZSH (Oh‚ÄëMy‚ÄëZSH custom)"
  local custom_plugins_path="/usr/share/oh-my-zsh/custom/plugins"
  try_cmd "Crear directorio de plugins" sudo mkdir -p "$custom_plugins_path"
  try_cmd "Permisos de plugins" sudo chmod 755 /usr/share/oh-my-zsh/custom -R

  local repos=(
    "https://github.com/hlissner/zsh-autopair.git"
    "https://github.com/zsh-users/zsh-autosuggestions.git"
    "https://github.com/zsh-users/zsh-completions.git"
    "https://github.com/zsh-users/zsh-history-substring-search.git"
    "https://github.com/zsh-users/zsh-syntax-highlighting.git"
    "https://github.com/MichaelAquilina/zsh-you-should-use.git"
    "https://github.com/Aloxaf/fzf-tab.git"
  )

  for repo in "${repos[@]}"; do
    local name
    name=$(basename "$repo" .git)
    if [[ -d "$custom_plugins_path/$name" ]]; then
      try_cmd "Actualizar plugin $name" sudo git -C "$custom_plugins_path/$name" pull --quiet
    else
      try_cmd "Clonar plugin $name" sudo git clone --depth=1 --quiet "$repo" "$custom_plugins_path/$name"
    fi
  done

  try_cmd "Renombrar you-should-use" sudo mv -f "${custom_plugins_path}/zsh-you-should-use" "${custom_plugins_path}/you-should-use" || true
  log_success "‚úÖ Plugins comunes instalados/actualizados"
}

verify_zsh_setup() {
  log_section "üîç Verificaci√≥n post-instalaci√≥n de ZSH"

  local current_shell
  current_shell=$(getent passwd "$USER" | cut -d: -f7)

  if [[ "$current_shell" != *"zsh" ]]; then
    log_warn "‚ö†Ô∏è El shell predeterminado a√∫n no es ZSH para $USER"
  else
    log_success "‚úÖ ZSH es el shell predeterminado"
  fi

  if [[ ! -f "$HOME/.zshrc" ]]; then
    log_error "‚ùå Archivo .zshrc no encontrado en $HOME"
  else
    grep -q "oh-my-zsh" "$HOME/.zshrc" && log_success "‚úÖ .zshrc contiene Oh‚ÄëMy‚ÄëZSH" || log_warn "‚ö†Ô∏è .zshrc no hace referencia a Oh‚ÄëMy‚ÄëZSH"
    grep -q "starship init zsh" "$HOME/.zshrc" && log_success "‚úÖ Starship est√° configurado en .zshrc" || log_warn "‚ö†Ô∏è Starship no est√° declarado en .zshrc"
  fi

  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    log_error "‚ùå Directorio .oh-my-zsh no encontrado"
  else
    log_success "‚úÖ Oh‚ÄëMy‚ÄëZSH est√° instalado correctamente"
  fi

  if command -v starship &>/dev/null; then
    log_success "‚úÖ Starship est√° disponible en PATH"
  else
    log_warn "‚ö†Ô∏è Starship no est√° en PATH"
  fi
}

_install_zsh_for() {
  local user="$1"
  local home_dir="$2"
  local sudo_prefix="$3"

  log_section "üêö Instalando ZSH para $user"

  try_cmd "Crear estructura de directorios" ${sudo_prefix}mkdir -p     "$home_dir/.config" "$home_dir/.cache/zsh" "$home_dir/.local/share/zsh"

  if [[ -f "$home_dir/.zshrc" ]]; then
    try_cmd "Backup .zshrc existente" ${sudo_prefix}mv -f "$home_dir/.zshrc" "$home_dir/.zshrc.backup.$(date +%F)"
  fi

  if [[ -d "$home_dir/.oh-my-zsh" ]]; then
    try_cmd "Actualizar Oh‚ÄëMy‚ÄëZSH" ${sudo_prefix}git -C "$home_dir/.oh-my-zsh" pull --quiet
  else
    try_cmd "Clonar Oh‚ÄëMy‚ÄëZSH" ${sudo_prefix}git clone --depth=1 --quiet https://github.com/ohmyzsh/ohmyzsh.git "$home_dir/.oh-my-zsh"
  fi

  if [[ -f "${SCRIPT_DIR}/../../dotfiles/.zshrc" ]]; then
    try_cmd "Copiar .zshrc" ${sudo_prefix}cp -f "${SCRIPT_DIR}/../../dotfiles/.zshrc" "$home_dir/.zshrc"
  else
    ${sudo_prefix}bash -c "cat > '$home_dir/.zshrc' <<'EOF'
export ZSH="\$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"
plugins=(git sudo)
source \$ZSH/oh-my-zsh.sh
EOF"
  fi

  if command -v starship &>/dev/null; then
    try_cmd "A√±adir Starship al .zshrc" ${sudo_prefix}sh -c "echo 'eval "\$(starship init zsh)"' >> '$home_dir/.zshrc'"

    local themes_folder="$home_dir/.config/starship_themes"
    try_cmd "Descargar configuraci√≥n principal" wget -q "https://raw.githubusercontent.com/gabrielomana/MyStarships/main/prompt_black.toml" -O /tmp/starship_config
    try_cmd "Copiar configuraci√≥n starship.toml" ${sudo_prefix}cp -f /tmp/starship_config "$home_dir/.config/starship.toml"
    try_cmd "Permisos de starship.toml" ${sudo_prefix}chown $user:$user "$home_dir/.config/starship.toml"
    try_cmd "Crear carpeta de temas" ${sudo_prefix}mkdir -p "$themes_folder"

    local theme_files=(
      "prompt_black.toml"
      "prompt_matcha.toml"
      "prompt_nord_aurora.toml"
      "prompt_nord_frost.toml"
    )

    for theme in "${theme_files[@]}"; do
      try_cmd "Descargar tema $theme" wget -q "https://raw.githubusercontent.com/gabrielomana/MyStarships/main/$theme" -O "/tmp/$theme"
      try_cmd "Instalar tema $theme" ${sudo_prefix}cp -f "/tmp/$theme" "$themes_folder/$theme"
      try_cmd "Permisos de $theme" ${sudo_prefix}chown $user:$user "$themes_folder/$theme"
    done
  fi

  try_cmd "Asignar ownership de $user" ${sudo_prefix}chown -R "$user:$user"     "$home_dir/.oh-my-zsh" "$home_dir/.zshrc" "$home_dir/.config" "$home_dir/.cache"

  verify_zsh_in_shells
  try_cmd "Cambiar shell por defecto" ${sudo_prefix}chsh -s "$(command -v zsh)" "$user"

  if [[ "$SHELL" != "$(command -v zsh)" ]]; then
    log_warn "‚ö†Ô∏è Shell actual a√∫n no es ZSH. Ejecuta manualmente: exec zsh"
  else
    log_info "‚úÖ ZSH ya es el shell activo"
  fi

  log_success "‚úÖ ZSH configurado para $user"
}
