#!/bin/bash
function check_uninstalled() {
  local package
  list=""

  while read -r package; do
    [ -z "$package" ] && continue

    if dnf list installed "$package" >/dev/null 2>&1; then
      list+=" $package"
    fi
  done < "$1"

  if [ -n "$list" ]; then
    sudo dnf remove -y $list
    sudo dnf autoremove -y
    sudo dnf install -f
    sudo dnf clean all
    clear
  else
    clear
    echo "No packages to remove."
  fi
}

# Usage example:
# check_uninstalled "package_list.txt"


function check_installed() {
 # Parámetros y archivo de salida
    list_file="$1"

    # Verificar si el archivo de lista existe
    if [ ! -f "$list_file" ]; then
        echo "El archivo de lista '$list_file' no existe."
        return
    fi
    packages=()
    # Leer Cada Línea del Archivo de Lista
    while read -r line; do
        # Limpiar la Línea de Espacios en Blanco
        line=$(echo "$line" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        packages+=("$line")
    done < "$list_file"

   # Instalar grupos y paquetes si hay elementos en los arreglos
    c="sudo dnf install -y --skip-broken ${packages[@]}"
      echo $c
      sleep 3
      eval $c
}

function add_extra_repos() {
  ## EXTRA REPOS

  # WebApp Manager
  sudo dnf -y copr enable refi64/webapp-manager

  # Brave Browser
  sudo dnf config-manager --add-repo https://brave-browser-rpm-release.s3.brave.com/x86_64/
  sudo rpm --import https://brave-browser-rpm-release.s3.brave.com/brave-core.asc

  # Balena Etcher
  curl -1sLf 'https://dl.cloudsmith.io/public/balena/etcher/setup.rpm.sh' | sudo -E bash

  # OnlyOffice
  sudo yum -y install https://download.onlyoffice.com/repo/centos/main/noarch/onlyoffice-repo.noarch.rpm

  # Personal Repo
  sudo dnf -y copr enable ayoungdukie/Personal_Repo

  # Visual Studio Code
  sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
  sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

  # Actualizar repositorios
  sudo dnf check-update
  sudo dnf makecache --refresh
}


function install_kde {
  echo "INSTALL KDE PLASMA: "
  echo " - Install KDE Plasma Core"
  check_installed "${kde_plasma}"
  sudo systemctl enable sddm
  sudo systemctl set-default graphical.target
  echo "$(cat /etc/sddm.conf | sed -E s/'^\#?Numlock\=.*$'/'Numlock=on'/)" | sudo tee /etc/sddm.conf && sudo systemctl daemon-reload
  sleep 3

  #CLEAN PLASMA
  clear
  check_uninstalled "${kde_bloatware}"
  sleep 7

  #KDE'S apps
  clear
  echo "INSTALL KDE PLASMA: "
  echo " - Install KDEL Plasma Core"
  echo " - Remove apps and bloatware"
  echo " - Install KDE's APPS"
  sleep 3
  check_installed "${kde_plasma_apps}"
}

function flameshot_shortcuts_KDE() {
    # Ruta del escritorio
    desktop_path="$HOME/$(xdg-user-dir DESKTOP)"
    # Contenido del archivo
    script_content="flameshot gui --raw | convert - -resize 400% png:- | tesseract stdin stdout | awk '{printf \"%s\", (NR>1 ? \"\\n\" : \"\") $0}' | xclip -in -selection clipboard"
    # Ruta completa del archivo en el escritorio
    file_path="$desktop_path/flameshot_OCR.txt"
    # Forzar la creación y reemplazo del archivo
    echo -e "$script_content" > "$file_path"

    # Archivo de configuración
    archivo_config="$HOME/.config/kglobalshortcutsrc"
    # Contenido de los atajos
    atajo_flameshot="[org.flameshot.Flameshot.desktop]
    Capture=Print,none,Tomar captura de pantalla
    Configure=Ctrl+Shift+Print,none,Configurar
    Launcher=Ctrl+Print,none,Open launcher
    _k_friendly_name=Flameshot
    _launch=none,none,Flameshot"

    atajo_plasma="[PlasmaShortcuts]
    Print=flameshot gui"

    # Añadir atajos directamente
    echo -e "$atajo_flameshot" | sudo tee -a "$archivo_config" > /dev/null
    echo -e "$atajo_plasma" | sudo tee -a "$archivo_config" > /dev/null

    # Ejecutar kbuildsycoca5 con sudo
    sudo kbuildsycoca5
}

function hardware-settings {
  # Obtener el nombre del fabricante de la GPU.
  gpu_vendor=$(lspci | grep -i "3D controller" | awk '{print $3}')
  sudo dnf install -y ffmpeg ffmpeg-libs libva libva-utils
  sudo dnf config-manager --set-enabled fedora-cisco-openh264
  sudo dnf install -y openh264 gstreamer1-plugin-openh264 mozilla-openh264

  # Instalar los controladores de la GPU.
  case "$gpu_vendor" in
    Intel*)
      echo "Instalando controladores para la GPU Intel..."
      sudo dnf install -y vdpau-driver-all intel-media-driver
      ;;
    AMD*)
      echo "Instalando controladores para la GPU AMD..."
      sudo dnf install -y akmod-amdgpu radeon-profile vdpau-driver-all amdgpu-pro
      sudo dnf swap mesa-va-drivers mesa-va-drivers-freeworld
      sudo dnf swap mesa-vdpau-drivers mesa-vdpau-drivers-freeworld
      ;;
    NVIDIA*)
      echo "Instalando controladores para la GPU NVIDIA..."
      sudo dnf install -y akmod-nvidia nvidia-driver nvidia-settings nvidia-xconfig vdpau-driver-all
      sudo dnf install -y nvidia-vaapi-driver
      sudo grubby --update-kernel=ALL --args="nvidia-drm.modeset=1"
      ;;
  esac

  # Verificar que la aceleración de hardware esté instalada correctamente.
  for api in vaapi vdpau; do
    echo "Verificando $api"
    if ! command -v $api-info &> /dev/null; then
      echo "$api no está instalado."
    fi
    echo "$api está instalado."
  done

  # Configuración del procesador
  # Obtener el nombre del procesador.
  cpu_name=$(lscpu | grep -Ei "Model name|Nombre del modelo" | awk '{print $0}')

  # Instalar los controladores y microcódigos apropiados.
  if echo "$cpu_name" | grep -qi "intel"; then
    echo "Instalando controladores y microcódigos para el procesador Intel..."
    sudo dnf install --enablerepo=rpmfusion-nonfree akmod-intel-ucode intel-microcode
  elif echo "$cpu_name" | grep -qi "amd"; then
    echo "Instalando controladores y microcódigos para el procesador AMD..."
    sudo dnf install --enablerepo=rpmfusion-nonfree akmod-amd-ucode amd-microcode
  else
    echo "No se pudo identificar el procesador."
  fi

  # Verificar si la máquina es un host de máquinas virtuales.
  if [[ "$(cat /sys/class/dmi/id/chassis_type)" != "Machine" && "$(cat /sys/class/dmi/id/chassis_type)" != "Maquina" ]]; then
    # Estamos en una máquina física
    echo "Máquina física detectada."
  else
    # Estamos en una máquina virtual

    # Identificar el hypervisor
    hypervisor=$(cat /sys/class/dmi/id/product_name)

    case "$hypervisor" in
      VMware*)
        echo "Instalando controladores para VMware..."
        sudo dnf install --enablerepo=rpmfusion-nonfree open-vm-tools
        ;;
      Microsoft*)
        echo "Instalando controladores para Microsoft Hyper-V..."
        sudo dnf install --enablerepo=rpmfusion-nonfree hyperv-tools
        ;;
      VirtualBox*)
        echo "Instalando controladores para VirtualBox..."
        sudo dnf install --enablerepo=rpmfusion-nonfree VirtualBox-guest-additions-iso
        sudo mount /dev/cdrom /mnt/cdrom
        sudo ./VBoxLinuxAdditions.run
        sudo umount /mnt/cdrom
        ;;
      KVM*)
        echo "Instalando controladores para KVM..."
        sudo dnf install --enablerepo=rpmfusion-nonfree libvirt-guest-tools
        ;;
      *)
        echo "Hypervisor no reconocido: $hypervisor"
        ;;
    esac
  fi
}

function install_core_apps() {
  # Herramientas y bibliotecas de desarrollo
  sudo dnf install -y npm
  sudo npm install -g electron-store
  sudo dnf install -y python3-pip

  # Instalación de Rust
  sudo wget https://sh.rustup.rs -O rustup-init.sh
  sudo chmod +x rustup-init.sh
  ./rustup-init.sh -y
  source "$HOME/.cargo/env"
  sudo rm rustup-init.sh -rf

  # Actualizar variables de entorno de Rust
  source "$HOME/.cargo/env"
  source "$HOME/.profile"
  source "$HOME/.cargo/env"

  # Codecs y controladores
  clear
  echo "INSTALAR APLICACIONES BÁSICAS DEL SISTEMA:"
  echo " - Herramientas y bibliotecas de desarrollo"
  echo " - Codecs y controladores"
  sleep 3

  # Instalación y actualización de grupos de paquetes
  sudo dnf -y group install "C Development Tools and Libraries" "Development Tools"
  sudo dnf -y groupupdate multimedia sound-and-video core --exclude=zram* --setopt="install_weak_deps=False" --exclude=PackageKit-gstreamer-plugin --allowerasing && sync
  sudo dnf swap 'ffmpeg-free' 'ffmpeg' --allowerasing

  # Instalación adicional de paquetes
  sudo dnf install -y gstreamer1-plugins-{bad-\*,good-\*,base} gstreamer1-plugin-openh264 gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel ffmpeg gstreamer-ffmpeg
  sudo dnf install -y lame\* --exclude=lame-devel
  sudo dnf -y group upgrade --with-optional Multimedia

  # Utilidades
  clear
  echo "INSTALAR APLICACIONES BÁSICAS DEL SISTEMA:"
  echo " - Herramientas y bibliotecas de desarrollo"
  echo " - Codecs y controladores"
  echo " - Utilidades"
  sleep 3

  numlockx on
  sudo numlockx on
  sudo sed -i 's/^\#?Numlock\=.*$/Numlock=on/' /etc/sddm.conf
  sudo systemctl daemon-reload
  sudo dnf copr enable atim/ubuntu-fonts -y && sudo dnf install -y ubuntu-family-fonts
  sudo fc-cache -fv
  sudo dnf swap ffmpeg-free ffmpeg --allowerasing

  cargo install cargo-update topgrade eza

  hardware-settings

  clear
  echo "INSTALAR APLICACIONES BÁSICAS DEL SISTEMA:"
  echo " - Herramientas y bibliotecas de desarrollo"
  echo " - Codecs y controladores"
  echo " - Utilidades"
  sleep 3

  sleep 3
  check_installed "${utilities}"
  pip install lastversion
  cargo install cargo-update

  #PeaZip
  flatpak install flathub io.github.peazip.PeaZip -y
  # Descargar el archivo peazip-flatpak.desktop
  wget -O peazip-flatpak.desktop "https://shorturl.at/akvF4"
  # Mover el archivo descargado al directorio correcto
  sudo mv peazip-flatpak.desktop /usr/share/kservices5/ServiceMenus/
  # Cambiar los permisos del archivo para que sea ejecutable
  sudo chmod +x /usr/share/kservices5/ServiceMenus/peazip-flatpak.desktop
  # Limpiar la caché de Dolphin para que reconozca los cambios
  kbuildsycoca5 --noincremental

  # Definir nuevos alias
   new_aliases="# Alias adicionales
  if command -v bat &> /dev/null; then
    alias cat=\"bat -f\"
  fi
  alias ocat=\"/usr/bin/cat\"
  alias fupdate=\"topgrade && sudo hblock -O /etc/host\"
  alias l=\"eza\"
  alias lastversion=\"~/.local/pipx/venvs/lastversion/bin/./lastversion\"
  alias kedit=\"/usr/bin/featherpad\"
  alias ytmdesktop=\"/usr/bin/flatpak run --branch=stable --arch=x86_64 --command=start-ytmdesktop.sh --file-forwarding app.ytmdesktop.ytmdesktop\"

  function ls() {
    if command -v eza &> /dev/null; then
        if [[ \$# -eq 0 ]]; then
            # Si no hay argumentos, ejecuta eza con los sufijos adicionales
            eza --group-directories-first --icons
        else
            case \$1 in
                ls) shift; eza \$@ --group-directories-first --icons;;
                ll) shift; eza \$@ -lbGFhmua --group-directories-first --no-permissions --icons;;
                llp) shift; eza \$@ -lbGFhmua --group-directories-first --icons;;
                la) shift; eza \$@ -a --group-directories-first --icons;;
                lt) shift; eza \$@ --tree --level=2 --icons;;
                lt3) shift; eza \$@ --tree --level=3 --icons;;
                lt4) shift; eza \$@ --tree --level=4 --icons;;
                *)
                # Agregamos la opción --color solo si es un terminal interactivo
                if [ -t 1 ]; then
                    eza \$@ --group-directories-first --icons --color
                else
                    eza \$@ --group-directories-first --icons
                fi
                ;;
            esac
        fi
    else
        # Si eza no está instalado, simplemente ejecuta el comando ls estándar
        /bin/ls \$@
    fi
}"

  # Agregar nuevos alias al final del archivo .bashrc
  echo -e "$new_aliases" >> ~/.bashrc
  echo -e "$new_aliases" | sudo tee -a /root/.bashrc

  echo -e "export PATH=\$HOME/.cargo/bin:/usr/local/bin:\$PATH" | sudo tee -a ~/.bashrc
  echo -e "export PATH=\$HOME/.cargo/bin:/usr/local/bin:\$PATH" | sudo tee -a /root/.bashrc

  # Directorio temporal para descargar fuentes
  temp_dir="/tmp/nerd_fonts"
  # Crear directorio temporal si no existe
  mkdir -p "$temp_dir"

  # Obtener URLs de descarga para las versiones más recientes
  font_names=("JetBrainsMono" "Ubuntu" "Mononoki" "Hack")
  for font_name in "${font_names[@]}"; do
    latest_release_url="https://github.com/ryanoasis/nerd-fonts/releases/latest"
    font_download_url=$(curl -sL -I -o /dev/null -w '%{url_effective}' "$latest_release_url" | sed "s/tag/download/")"/$font_name.zip"
    # Descargar la fuente
    wget -O "$temp_dir/$font_name.zip" "$font_download_url"
    # Descomprimir la fuente
    sudo unzip "$temp_dir/$font_name.zip" -d "$temp_dir/$font_name"
  done

  # Directorio de instalación de fuentes en el sistema
  install_dir="/usr/share/fonts/nerd_fonts"
  # Crear directorio de instalación si no existe
  sudo mkdir -p "$install_dir"
  # Mover fuentes al directorio de instalación
  for font_name in "${font_names[@]}"; do
    sudo mv "$temp_dir/$font_name"/*.{ttf,otf} "$install_dir"
  done

  # Instalar fuentes adicionales
  sudo dnf install -y curl cabextract xorg-x11-font-utils fontconfig dejavu-fonts* google-roboto-fonts

  # Instalar Microsoft Core Fonts
  sudo rpm -i https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm

  # Limpieza: Eliminar directorio temporal
  sudo rm -rf "$temp_dir"

  # Instalar emojis a color
  sudo dnf install -y google-noto-color-emoji* google-noto-emoji*
  # Copiar configuración de fuentes
  sudo cp dotfiles/fonts.conf /etc/fonts/fonts.conf -rf
  # Actualizar la caché de fuentes
  sudo fc-cache -fv
  flameshot_shortcuts_KDE
}

#MULTIMEDIA
function install_multimedia()
{
clear
echo -e "INSTALL MULTIMEDIA APPS: \n"
sleep 3
check_installed "${multimedia}"
}

#EXTRA APPS
function install_extra_apps() {
  clear
  a=0
  sudo chmod 1777 /var/tmp/
  sudo chmod 1777 /var/cache/
  sudo chmod 1777 /var/log/

  while [ $a -lt 1 ]; do
    read -p "Do you wish to install Extra APPS? " yn
    case $yn in
      [Yy]* )
        a=1
        #add_extra_repos
        #check_installed "${extra_apps}"
        f=1
        clear
        ;;
      [Nn]* )
        a=1
        echo "OK"
        clear
        ;;
      * ) echo "Please answer yes or no.";;
    esac
  done

  # Start and enable libvirtd service
  sudo systemctl start libvirtd
  sudo systemctl enable libvirtd

  # Add libvirt-qemu to HideUsers in sddm.conf
  echo -e "[Users]\nHideUsers=libvirt-qemu" | sudo tee -a /etc/sddm.conf
  clear

  if [ $f == 1 ]; then
    echo "apps installed!"
    sleep 5
    sudo cargo install cargo-update
    sudo timedatectl set-local-rtc 1
    sudo systemctl start libvirtd
    sudo systemctl enable libvirtd

    # OnlyOffice
    sudo dnf install onlyoffice-desktopeditors -y

    # Flatpak Apps
    flatpak install flathub com.github.dail8859.NotepadNext -y
    flatpak install flathub org.localsend.localsend_app -y
    flatpak install flathub org.strawberrymusicplayer.strawberry -y
    flatpak install flathub org.nomacs.ImageLounge -y
    flatpak install flathub com.github.vkohaupt.vokoscreenNG -y

    # Visual Studio Code
    sudo dnf install code -y
    code &
    sleep 5
    killall code
    
    sudo rm -f ~/.config/Code/User/settings.json
    echo '{
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.formatOnSave": true,
      "prettier.singleQuote": true,
      "prettier.trailingComma": "all",
      "prettier.jsxSingleQuote": true,
      "prettier.printWidth": 80,
      "editor.fontFamily": "\"JetBrainsMono Nerd Font\", Menlo, Monaco, \"Courier New\", monospace, \"Noto Color Emoji\"",
      "editor.fontLigatures": true,
      "editor.fontSize": 14,
      "editor.lineHeight": 24,
      "editor.fontWeight": "400",
      "workbench.colorTheme": "One Monokai"
    }' | sudo tee -a ~/.config/Code/User/settings.json

    code --install-extension "azemoh.one-monokai"
    code --install-extension "NarasimaPandiyan.jetbrainsmono"
    # Añadir el resto de las extensiones aquí

    # Kodi
    sudo flatpak install flathub tv.kodi.Kodi -y

    # AceStream
    last_version_link=$(lastversion --assets https://github.com/bro2020/acestream-appimage/releases)
    install_dir="/opt/AceStream"
    sudo mkdir -p "$install_dir"
    sudo chmod 777 "$install_dir"
    sudo wget -O "$install_dir/AceStream.AppImage" "$last_version_link"
    sudo wget -O "$install_dir/acestream_logo.png" "https://avatars.githubusercontent.com/u/15086619?v=4"
    sudo chmod +x "$install_dir/AceStream.AppImage"
    desktop_file="/usr/share/applications/acestream.desktop"
    echo "[Desktop Entry]
    Name=AceStream
    Exec=konsole -e '/opt/AceStream/AceStream.AppImage --client-console --no-sandbox'
    Icon=/opt/AceStream/acestream_logo.png
    Type=Application
    Categories=Network;" | sudo tee "$desktop_file"
  fi
}