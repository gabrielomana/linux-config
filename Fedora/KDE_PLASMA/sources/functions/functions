#!/bin/bash

#=========================================================================
# SCRIPT DE POST-INSTALACIÓN PARA FEDORA 42
# Este script automatiza la configuración post-instalación de Fedora 42
# Autor: Optimizado por Claude basado en script original
# Fecha: 24-04-2025
#=========================================================================

# Colores para mensajes
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
PURPLE="\033[1;35m"
CYAN="\033[1;36m"
NC="\033[0m" # No Color

# Variables globales
LOG_FILE="/tmp/fedora_post_install.log"
ERROR_LOG="/tmp/fedora_post_install_errors.log"
SCRIPT_VERSION="1.0.0"

# Rutas a archivos de configuración (deben ser definidas o pasadas como parámetros)
kde_plasma="${SCRIPT_DIR}/sources/lists/kde_plasma.list"
kde_bloatware="${SCRIPT_DIR}/sources/lists/kde_bloatware.list"
kde_plasma_apps="${SCRIPT_DIR}/sources/lists/kde_plasma_apps.list"
multimedia="${SCRIPT_DIR}/sources/lists/multimedia.list"
utilities="${SCRIPT_DIR}/sources/lists/utilities.list"
extra_apps="${SCRIPT_DIR}/sources/lists/extra_apps.list"

#=========================================================================
# FUNCIONES DE UTILIDAD
#=========================================================================

# Función para mostrar mensajes
show_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
    echo "[INFO] $1" >> "$LOG_FILE"
}

# Función para mostrar mensajes de éxito
show_success() {
    echo -e "${GREEN}[ÉXITO]${NC} $1"
    echo "[ÉXITO] $1" >> "$LOG_FILE"
}

# Función para mostrar advertencias
show_warning() {
    echo -e "${YELLOW}[ADVERTENCIA]${NC} $1"
    echo "[ADVERTENCIA] $1" >> "$LOG_FILE"
}

# Función para mostrar errores
show_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    echo "[ERROR] $1" >> "$LOG_FILE"
    echo "[ERROR] $1" >> "$ERROR_LOG"
}

# Función para mostrar secciones
show_section() {
    clear
    echo -e "${PURPLE}=================================================${NC}"
    echo -e "${PURPLE}   $1${NC}"
    echo -e "${PURPLE}=================================================${NC}"
    echo "[SECCIÓN] $1" >> "$LOG_FILE"
    sleep 1
}

# Función para mostrar progreso
show_progress() {
    local message="$1"
    local progress="$2"
    echo -e "${CYAN}[$progress]${NC} $message"
}

# Función para manejar errores sin detener el script
handle_error() {
    local cmd="$1"
    local error_msg="$2"

    if ! eval "$cmd" >> "$LOG_FILE" 2>> "$ERROR_LOG"; then
        show_error "$error_msg"
        return 1
    fi
    return 0
}

# Función para ejecutar comandos con manejo de errores
run_cmd() {
    local cmd="$1"
    local success_msg="$2"
    local error_msg="$3"

    echo "Ejecutando: $cmd" >> "$LOG_FILE"
    if eval "$cmd" >> "$LOG_FILE" 2>> "$ERROR_LOG"; then
        [ -n "$success_msg" ] && show_success "$success_msg"
        return 0
    else
        [ -n "$error_msg" ] && show_error "$error_msg"
        return 1
    fi
}

#=========================================================================
# FUNCIONES PRINCIPALES
#=========================================================================

# Función para instalar ZSH y configuraciones relacionadas
install_zsh() {
    show_section "Instalando ZSH, Oh-My-ZSH y Starship"

    # Verificar si el archivo de funciones existe
    local zsh_functions="${SCRIPT_DIR}/sources/functions/zsh_starship"
    if [ ! -f "$zsh_functions" ]; then
        show_error "Archivo de funciones ZSH no encontrado: $zsh_functions"
        return 1
    fi

    # Cargar las funciones
    source "$zsh_functions" || {
        show_error "Error al cargar funciones ZSH"
        return 1
    }

    # Verificar que la función principal existe
    if ! declare -f install_zsh_main > /dev/null; then
        show_error "Función install_zsh_main no encontrada en $zsh_functions"
        return 1
    fi

    # Ejecutar la instalación principal
    install_zsh_main || {
        show_error "Error durante la instalación de ZSH"
        return 1
    }

    show_success "Instalación de ZSH completada correctamente"
    return 0
}