#!/bin/bash

# Script para instalar y configurar ZSH, Oh-My-ZSH y Starship en Fedora 42
# Autor: Claude
# Fecha: 26/04/2025
# Versión: 1.0

# Obtener directorio del script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

# Función para mostrar mensajes con formato
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    
    case "$level" in
        "INFO") echo -e "[$timestamp] \033[1;34mINFO:\033[0m $message" ;;
        "SUCCESS") echo -e "[$timestamp] \033[1;32mSUCCESS:\033[0m $message" ;;
        "WARNING") echo -e "[$timestamp] \033[1;33mWARNING:\033[0m $message" ;;
        "ERROR") echo -e "[$timestamp] \033[1;31mERROR:\033[0m $message" ;;
        *) echo -e "[$timestamp] $message" ;;
    esac
}

# Función para ejecutar comandos con manejo de errores
run_command() {
    local cmd="$1"
    local description="$2"
    local silent="${3:-false}"
    
    [[ "$silent" == "false" ]] && log_message "INFO" "Ejecutando: $description"
    
    if [[ "$silent" == "true" ]]; then
        eval "$cmd" &>/dev/null
    else
        eval "$cmd" >/dev/null 2>&1
    fi
    
    local status=$?
    if [ $status -ne 0 ]; then
        log_message "ERROR" "Falló: $description (código $status)"
        return 1
    fi
    
    [[ "$silent" == "false" ]] && log_message "SUCCESS" "Completado: $description"
    return 0
}

# Verificar si se está ejecutando en Fedora 42
check_fedora_version() {
    if command -v rpm &>/dev/null; then
        local fedora_version=$(rpm -E %fedora 2>/dev/null || echo "0")
        if [ "$fedora_version" != "42" ]; then
            log_message "WARNING" "Este script está diseñado para Fedora 42, pero se detectó la versión $fedora_version"
            read -p "¿Desea continuar de todos modos? (s/n): " choice
            case "$choice" in
                s|S|si|Si|SI|yes|Yes|YES) return 0 ;;
                *) log_message "INFO" "Instalación cancelada por el usuario"; exit 1 ;;
            esac
        fi
    else
        log_message "WARNING" "No se pudo determinar la versión de Fedora"
    fi
    return 0
}

# Función para instalar ZSH para el usuario actual
install_zsh_for_user() {
    local user="$1"
    local home_dir="$2"
    local is_root=$([[ "$user" == "root" ]] && echo "true" || echo "false")
    local sudo_prefix=$([[ "$is_root" == "true" ]] && echo "" || echo "sudo ")
    
    log_message "INFO" "=== Iniciando instalación de ZSH para $user ==="
    
    # Crear directorios necesarios
    run_command "${sudo_prefix}mkdir -p $home_dir/.config/ $home_dir/.cache/zsh/ $home_dir/.local/share/zsh" "Creación de directorios para $user"
    run_command "${sudo_prefix}touch $home_dir/.config/starship.toml $home_dir/.zcompdump" "Creación de archivos de configuración para $user"
    
    # Respaldar .zshrc existente si existe
    if [ -f "$home_dir/.zshrc" ]; then
        run_command "${sudo_prefix}mv -f '$home_dir/.zshrc' '$home_dir/.zshrc-backup-$(date +\"%Y-%m-%d\")'" "Respaldo de .zshrc para $user"
    fi
    
    # Instalar oh-my-zsh
    if [ -d "$home_dir/.oh-my-zsh" ]; then
        run_command "${sudo_prefix}git -C '$home_dir/.oh-my-zsh' pull --quiet" "Actualización de Oh-My-ZSH para $user"
    else
        run_command "${sudo_prefix}git clone --quiet --depth=1 https://github.com/ohmyzsh/ohmyzsh.git '$home_dir/.oh-my-zsh'" "Instalación de Oh-My-ZSH para $user"
    fi
    
    # Crear .zshrc personalizado
    cat > /tmp/zshrc_temp << 'EOL'
# Configuración de ZSH generada automáticamente

# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme
ZSH_THEME="robbyrussell"

# Plugins
plugins=(
  git
  dnf
  sudo
  docker
  fzf
  autopair
  zsh-autosuggestions
  zsh-completions
  zsh-history-substring-search
  zsh-syntax-highlighting
  you-should-use
  fzf-tab
)

# Historia
HISTFILE="$HOME/.cache/zsh/history"
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt sharehistory
setopt incappendhistory
setopt hist_ignore_all_dups
setopt hist_ignore_space

# Completions
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose yes

# Alias útiles
alias ls='ls --color=auto'
alias ll='ls -la'
alias l='ls -lh'
alias update='sudo dnf update -y'
alias install='sudo dnf install -y'
alias remove='sudo dnf remove -y'
alias search='dnf search'
alias cls='clear'
alias reload='source ~/.zshrc'

# Path
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Source Oh-My-ZSH
source $ZSH/oh-my-zsh.sh

# Starship prompt
if command -v starship &>/dev/null; then
    eval "$(starship init zsh)"
fi
EOL
    
    run_command "${sudo_prefix}cp -f /tmp/zshrc_temp '$home_dir/.zshrc'" "Creación de .zshrc para $user"
    run_command "${sudo_prefix}chown $user:$user '$home_dir/.zshrc'" "Asignación de permisos a .zshrc" "true"
    
    # Mover archivos de caché
    if [ -f "$home_dir/.zcompdump" ]; then
        run_command "${sudo_prefix}mv -f '$home_dir/.zcompdump'* '$home_dir/.cache/zsh/'" "Movimiento de caché para $user" "true"
    fi
    
    # Configurar Starship
    run_command "wget -q 'https://raw.githubusercontent.com/gabrielomana/MyStarships/main/prompt_black.toml' -O /tmp/starship_config" "Descarga de configuración Starship"
    run_command "${sudo_prefix}cp -f /tmp/starship_config '$home_dir/.config/starship.toml'" "Configuración de Starship para $user"
    run_command "${sudo_prefix}chown $user:$user '$home_dir/.config/starship.toml'" "Asignación de permisos a starship.toml" "true"
    
    # Descargar temas adicionales
    local themes_folder="$home_dir/.config/starship_themes"
    run_command "${sudo_prefix}mkdir -p '$themes_folder'" "Creación de directorio para temas"
    
    local theme_files=(
        "prompt_black.toml"
        "prompt_matcha.toml"
        "prompt_nord_aurora.toml"
        "prompt_nord_frost.toml"
    )
    
    for theme in "${theme_files[@]}"; do
        run_command "wget -q 'https://raw.githubusercontent.com/gabrielomana/MyStarships/main/$theme' -O /tmp/${theme}" "Descarga de tema $theme"
        run_command "${sudo_prefix}cp -f /tmp/${theme} '$themes_folder/$theme'" "Instalación de tema $theme para $user"
        run_command "${sudo_prefix}chown $user:$user '$themes_folder/$theme'" "Asignación de permisos a tema $theme" "true"
    done
    
    # Cambiar shell por defecto
    run_command "${sudo_prefix}chsh -s $(which zsh) $user" "Configuración de ZSH como shell predeterminado para $user"
    
    log_message "SUCCESS" "Instalación para $user completada"
}

# Función para instalar y configurar plugins de ZSH
install_zsh_plugins() {
    log_message "INFO" "=== Instalando plugins de ZSH ==="
    
    # Crear directorio para plugins personalizados
    local custom_path="/usr/share/oh-my-zsh/custom/"
    local custom_plugins_path="${custom_path}plugins/"
    
    run_command "sudo mkdir -p '$custom_plugins_path'" "Creación de directorio para plugins"
    run_command "sudo chmod 755 '$custom_path' -R" "Configuración de permisos para plugins" "true"
    
    # Lista de repositorios de plugins
    local repositories=(
        "https://github.com/hlissner/zsh-autopair.git"
        "https://github.com/zsh-users/zsh-autosuggestions.git"
        "https://github.com/zsh-users/zsh-completions.git"
        "https://github.com/zsh-users/zsh-history-substring-search.git"
        "https://github.com/zsh-users/zsh-syntax-highlighting.git"
        "https://github.com/MichaelAquilina/zsh-you-should-use.git"
        "https://github.com/Aloxaf/fzf-tab.git"
    )
    
    # Instalar o actualizar cada plugin
    for repository in "${repositories[@]}"; do
        local plugin_name=$(basename "$repository" .git)
        local plugin_path="$custom_plugins_path$plugin_name"
        
        if [ -d "$plugin_path" ]; then
            run_command "sudo git -C '$plugin_path' pull --quiet" "Actualización del plugin $plugin_name"
        else
            run_command "sudo git clone --quiet --depth=1 '$repository' '$plugin_path'" "Instalación del plugin $plugin_name"
        fi
    done
    
    # Renombrar plugin you-should-use
    run_command "sudo mv -f ${custom_plugins_path}zsh-you-should-use ${custom_plugins_path}you-should-use 2>/dev/null" "Renombrado de plugin you-should-use" "true"
    
    log_message "SUCCESS" "Plugins de ZSH instalados correctamente"
}

# Función principal para instalar ZSH y todas sus configuraciones
main() {
    log_message "INFO" "=== INICIANDO INSTALACIÓN AUTOMÁTICA DE ZSH EN FEDORA 42 ==="
    
    # Verificar versión de Fedora
    check_fedora_version
    
    # Verificar si ya está instalado
    if [ -f "$HOME/.zsh_installed" ] && [ -f "/root/.zsh_installed" ]; then
        log_message "INFO" "ZSH ya está instalado para ambos usuarios. Saltando instalación."
        read -p "¿Desea reinstalar de todos modos? (s/n): " choice
        case "$choice" in
            s|S|si|Si|SI|yes|Yes|YES) ;;
            *) log_message "INFO" "Instalación cancelada por el usuario"; exit 0 ;;
        esac
    fi
    
    # Actualizar el sistema e instalar dependencias
    log_message "INFO" "Actualizando el sistema e instalando dependencias..."
    run_command "sudo dnf update -y" "Actualización del sistema"
    run_command "sudo dnf install -y zsh git wget curl fzf util-linux-user" "Instalación de dependencias"
    
    # Instalar Starship si no está instalado
    if ! command -v starship &>/dev/null; then
        log_message "INFO" "Instalando Starship..."
        run_command "curl -fsSL https://starship.rs/install.sh | sudo sh -s -- --yes" "Instalación de Starship"
    else
        log_message "INFO" "Starship ya está instalado"
    fi
    
    # Instalar plugins de ZSH
    install_zsh_plugins
    
    # Instalar ZSH para el usuario actual
    install_zsh_for_user "$(whoami)" "$HOME"
    
    # Instalar ZSH para root
    if sudo -v; then
        install_zsh_for_user "root" "/root"
    else
        log_message "WARNING" "No se pudo autenticar como root. Omitiendo instalación para root."
    fi
    
    # Marcar instalación como completada
    touch "$HOME/.zsh_installed"
    sudo touch "/root/.zsh_installed"
    
    log_message "SUCCESS" "=== INSTALACIÓN COMPLETADA CON ÉXITO ==="
    log_message "INFO" "Por favor, cierra sesión y vuelve a iniciar sesión para que los cambios surtan efecto."
}

# Ejecutar función principal
main
Este script ofrece las siguientes mejoras:

Estructura más modular con funciones bien definidas para cada tarea
Mejor manejo de errores con mensajes detallados y códigos de estado
Verificación de la versión de Fedora con opción para continuar o cancelar
Configuración de ZSH más completa con historia, completado y alias útiles
Instalación de plugins mejorada con manejo centralizado
Sistema de registro (logging) con códigos de colores y timestamps
Opciones más flexibles para instalar solo para el usuario o también para root
Verificación de instalaciones previas para evitar instalaciones repetidas

Para usar este script:

Guárdalo como install_zsh_fedora42.sh
Dale permisos de ejecución: chmod +x install_zsh_fedora42.sh
Ejecútalo: ./install_zsh_fedora42.sh
ReintentarGLa idea es que este dividido en 3 fucniones, una que instala todo esto en el usuario real, otra que lo instala en el root, y una funcion main, que controla en invoca  alas otras 2EditarEntiendo que buscas un script dividido en tres funciones principales: una para el usuario real, otra para root, y una función main que las invoque. He reorganizado el script para seguir exactamente esa estructura:
bash#!/bin/bash

# Script para instalar y configurar ZSH en Fedora 42
# Autor: Claude
# Fecha: 26/04/2025
# Versión: 1.0

# Obtener directorio del script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

# Función para mostrar mensajes con formato
print_message() {
    local type="$1"
    local message="$2"
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    
    case "$type" in
        "INFO") echo -e "[$timestamp] \033[1;34mINFO:\033[0m $message" ;;
        "SUCCESS") echo -e "[$timestamp] \033[1;32mSUCCESS:\033[0m $message" ;;
        "WARNING") echo -e "[$timestamp] \033[1;33mWARNING:\033[0m $message" ;;
        "ERROR") echo -e "[$timestamp] \033[1;31mERROR:\033[0m $message" ;;
        *) echo -e "[$timestamp] $message" ;;
    esac
}

# Función para ejecutar comandos con manejo de errores
execute_command() {
    local cmd="$1"
    local msg="$2"
    
    print_message "INFO" "Ejecutando: $msg"
    eval "$cmd" > /dev/null 2>&1
    
    if [ $? -ne 0 ]; then
        print_message "ERROR" "Falló: $msg"
        return 1
    fi
    
    return 0
}

# Función principal que invoca la instalación para usuario y root
install_zsh_main() {
    # Verificar si ya está instalado para evitar repeticiones
    if [ -f "$HOME/.zsh_installed" ] && [ -f "/root/.zsh_installed" ]; then
        print_message "INFO" "ZSH ya está instalado para ambos usuarios. Saltando instalación."
        return 0
    fi

    print_message "INFO" "=== INICIANDO INSTALACIÓN AUTOMÁTICA DE ZSH EN FEDORA 42 ==="

    # Actualizar repositorios e instalar dependencias básicas
    execute_command "sudo dnf update -y" "Actualizando repositorios"
    execute_command "sudo dnf install -y zsh git wget curl fzf util-linux-user" "Instalando dependencias básicas"

    # Instalar Starship prompt
    if ! command -v starship &>/dev/null; then
        print_message "INFO" "Instalando Starship..."
        execute_command "curl -fsSL https://starship.rs/install.sh | sudo sh -s -- --yes" "Instalación de Starship"
    fi

    # Instalar plugins comunes en directorio compartido
    install_common_plugins

    # Ejecutar instalación para el usuario actual sin confirmación
    print_message "INFO" "=== INICIANDO INSTALACIÓN AUTOMÁTICA DE ZSH PARA USUARIO ==="
    install_zsh_user

    # Ejecutar instalación para root sin confirmación
    print_message "INFO" "=== INICIANDO INSTALACIÓN AUTOMÁTICA DE ZSH PARA ROOT ==="
    install_zsh_root

    # Marcar instalación como completada
    touch "$HOME/.zsh_installed"
    sudo touch "/root/.zsh_installed"
    
    print_message "SUCCESS" "=== INSTALACIÓN AUTOMÁTICA COMPLETADA CON ÉXITO ==="
    print_message "INFO" "Por favor, cierra sesión y vuelve a iniciar sesión para que los cambios surtan efecto."
}

# Instalación de plugins comunes
install_common_plugins() {
    print_message "INFO" "Instalando plugins compartidos de ZSH"

    # Configurar paths para plugins
    local custom_path="/usr/share/oh-my-zsh/custom/"
    local custom_plugins_path="${custom_path}plugins/"

    # Crear directorios de plugins con permisos adecuados
    execute_command "sudo mkdir -p '$custom_plugins_path'" "Creando directorios para plugins"
    execute_command "sudo chmod 755 '$custom_path' -R" "Configurando permisos para plugins" 

    # Lista de repositorios a clonar/actualizar
    local repositories=(
        "https://github.com/hlissner/zsh-autopair.git"
        "https://github.com/zsh-users/zsh-autosuggestions.git"
        "https://github.com/zsh-users/zsh-completions.git"
        "https://github.com/zsh-users/zsh-history-substring-search.git"
        "https://github.com/zsh-users/zsh-syntax-highlighting.git"
        "https://github.com/MichaelAquilina/zsh-you-should-use.git"
        "https://github.com/Aloxaf/fzf-tab.git"
    )

    # Clonar/actualizar plugins automáticamente
    for repository in "${repositories[@]}"; do
        local plugin_name=$(basename "$repository" .git)
        local plugin_path="$custom_plugins_path$plugin_name"

        if [ -d "$plugin_path" ]; then
            execute_command "sudo git -C '$plugin_path' pull --quiet" "Actualizando plugin $plugin_name"
        else
            execute_command "sudo git clone --quiet --depth=1 '$repository' '$plugin_path'" "Clonando plugin $plugin_name"
        fi
    done

    # Renombrar plugin you-should-use
    execute_command "sudo mv -f ${custom_plugins_path}zsh-you-should-use ${custom_plugins_path}you-should-use 2>/dev/null" "Renombrando plugin you-should-use"
}

verify_zsh_in_shells() {
    local zsh_path=$(which zsh)
    
    if ! grep -q "$zsh_path" /etc/shells; then
        print_message "INFO" "Agregando $zsh_path a /etc/shells"
        echo "$zsh_path" | sudo tee -a /etc/shells > /dev/null
    fi
}

# Instalación automática para el usuario actual
install_zsh_user() {
    print_message "INFO" "Instalación automática de ZSH para el usuario $(whoami)"

    local user=$(whoami)
    local path="$HOME"

    # Crear estructura de directorios necesaria
    execute_command "mkdir -p $path/.config/ $path/.cache/zsh/ $path/.local/share/zsh" "Creando directorios para ZSH"
    execute_command "touch $path/.config/starship.toml $path/.zcompdump" "Creando archivos de configuración"

    # Respaldar .zshrc existente si existe
    [ -f "$path/.zshrc" ] && execute_command "mv -f '$path/.zshrc' '$path/.zshrc-backup-$(date +\"%Y-%m-%d\")'" "Respaldando .zshrc existente"

    # Instalar oh-my-zsh
    if [ -d "$path/.oh-my-zsh" ]; then
        execute_command "git -C '$path/.oh-my-zsh' pull --quiet" "Actualizando Oh-My-ZSH"
    else
        execute_command "git clone --quiet --depth=1 https://github.com/ohmyzsh/ohmyzsh.git '$path/.oh-my-zsh'" "Clonando Oh-My-ZSH"
    fi

    # Crear archivo .zshrc personalizado
    cat > "$path/.zshrc" << 'EOL'
# Configuración ZSH generada automáticamente

# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme
ZSH_THEME="robbyrussell"

# Plugins
plugins=(
  git
  dnf
  sudo
  autopair
  zsh-autosuggestions
  zsh-completions
  zsh-history-substring-search
  zsh-syntax-highlighting
  you-should-use
  fzf-tab
  fzf
)

# Historia
HISTFILE="$HOME/.cache/zsh/history"
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt sharehistory
setopt incappendhistory
setopt hist_ignore_all_dups
setopt hist_ignore_space

# Completions
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu select

# Alias útiles
alias ls='ls --color=auto'
alias ll='ls -la'
alias l='ls -lh'
alias update='sudo dnf update -y'
alias install='sudo dnf install -y'
alias remove='sudo dnf remove -y'
alias search='dnf search'
alias cls='clear'
alias reload='source ~/.zshrc'

# Path
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Source Oh-My-ZSH
source $ZSH/oh-my-zsh.sh

# Starship prompt
if command -v starship &>/dev/null; then
    eval "$(starship init zsh)"
fi
EOL

    # Mover archivos de caché
    [ -f "$path/.zcompdump" ] && execute_command "mv -f '$path/.zcompdump'* '$path/.cache/zsh/'" "Moviendo archivos de caché"

    # Descargar configuración de Starship
    local starship_config_url="https://raw.githubusercontent.com/gabrielomana/MyStarships/main/prompt_black.toml"
    execute_command "wget -q '$starship_config_url' -O '$path/.config/starship.toml'" "Descargando configuración de Starship"

    # Descargar temas adicionales
    local themes_folder="$path/.config/starship_themes"
    execute_command "mkdir -p '$themes_folder'" "Creando directorio para temas de Starship"

    local theme_files=(
        "prompt_black.toml"
        "prompt_matcha.toml"
        "prompt_matcha_v2.toml"
        "prompt_nord_aurora.toml"
        "prompt_nord_frost.toml"
    )

    for theme in "${theme_files[@]}"; do
        execute_command "wget -q 'https://raw.githubusercontent.com/gabrielomana/MyStarships/main/$theme' -O '$themes_folder/$theme'" "Descargando tema $theme"
    done

    # Cambiar shell por defecto
    verify_zsh_in_shells
    execute_command "sudo chsh -s $(which zsh) $user" "Configurando ZSH como shell predeterminado"

    print_message "SUCCESS" "Instalación para usuario $(whoami) completada"
}

# Instalación automática para root
install_zsh_root() {
    print_message "INFO" "Iniciando instalación automática de ZSH para root"

    # Verificar acceso root
    if ! sudo -v; then
        print_message "WARNING" "No se pudo autenticar como root. Omitiendo instalación para root."
        return 1
    fi

    # Crear estructura de directorios para root
    execute_command "sudo mkdir -p /root/.config/ /root/.cache/zsh/ /root/.local/share/zsh" "Creando directorios para root"
    execute_command "sudo touch /root/.config/starship.toml /root/.zcompdump" "Creando archivos de configuración para root"

    # Respaldar .zshrc existente si existe
    [ -f "/root/.zshrc" ] && execute_command "sudo mv -f '/root/.zshrc' '/root/.zshrc-backup-$(date +\"%Y-%m-%d\")'" "Respaldando .zshrc de root"

    # Instalar oh-my-zsh para root
    if [ -d "/root/.oh-my-zsh" ]; then
        execute_command "sudo git -C /root/.oh-my-zsh pull --quiet" "Actualizando Oh-My-ZSH para root"
    else
        execute_command "sudo git clone --quiet --depth=1 https://github.com/ohmyzsh/ohmyzsh.git /root/.oh-my-zsh" "Clonando Oh-My-ZSH para root"
    fi

    # Crear archivo .zshrc para root
    cat > /tmp/root_zshrc << 'EOL'
# Configuración ZSH para root generada automáticamente

# Path to your oh-my-zsh installation
export ZSH="/root/.oh-my-zsh"

# Theme
ZSH_THEME="robbyrussell"

# Plugins
plugins=(
  git
  dnf
  sudo
  autopair
  zsh-autosuggestions
  zsh-completions
  zsh-history-substring-search
  zsh-syntax-highlighting
  you-should-use
  fzf-tab
  fzf
)

# Historia
HISTFILE="/root/.cache/zsh/history"
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt sharehistory
setopt incappendhistory
setopt hist_ignore_all_dups
setopt hist_ignore_space

# Completions
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu select

# Alias útiles para root
alias ls='ls --color=auto'
alias ll='ls -la'
alias l='ls -lh'
alias update='dnf update -y'
alias install='dnf install -y'
alias remove='dnf remove -y'
alias search='dnf search'
alias cls='clear'
alias reload='source ~/.zshrc'

# Path
export PATH=/root/bin:/usr/local/bin:$PATH

# Source Oh-My-ZSH
source $ZSH/oh-my-zsh.sh

# Starship prompt
if command -v starship &>/dev/null; then
    eval "$(starship init zsh)"
fi
EOL

    execute_command "sudo cp -f /tmp/root_zshrc /root/.zshrc" "Copiando .zshrc para root"
    execute_command "rm -f /tmp/root_zshrc" "Limpiando archivos temporales"

    # Mover archivos de caché para root
    [ -f "/root/.zcompdump" ] && execute_command "sudo mv -f '/root/.zcompdump'* '/root/.cache/zsh/'" "Moviendo archivos de caché para root"

    # Descargar configuración de Starship para root
    local starship_config_url="https://raw.githubusercontent.com/gabrielomana/MyStarships/main/prompt_black.toml"
    execute_command "wget -q '$starship_config_url' -O /tmp/starship_config" "Descargando configuración de Starship"
    execute_command "sudo cp -f /tmp/starship_config /root/.config/starship.toml" "Copiando configuración de Starship para root"
    execute_command "rm -f /tmp/starship_config" "Limpiando archivos temporales"

    # Descargar temas adicionales para root
    local themes_folder="/root/.config/starship_themes"
    execute_command "sudo mkdir -p '$themes_folder'" "Creando directorio para temas de Starship para root"

    local theme_files=(
        "prompt_black.toml"
        "prompt_matcha.toml"
        "prompt_nord_aurora.toml"
    )

    for theme in "${theme_files[@]}"; do
        execute_command "wget -q 'https://raw.githubusercontent.com/gabrielomana/MyStarships/main/$theme' -O /tmp/${theme}" "Descargando tema $theme"
        execute_command "sudo cp -f /tmp/${theme} '$themes_folder/$theme'" "Copiando tema $theme para root"
        execute_command "rm -f /tmp/${theme}" "Limpiando archivos temporales"
    done

    # Cambiar shell por defecto para root
    verify_zsh_in_shells
    execute_command "sudo chsh -s $(which zsh) root" "Configurando ZSH como shell predeterminado para root"

    # Configurar permisos adecuados
    execute_command "sudo chmod 700 /root /root/.oh-my-zsh /root/.config" "Configurando permisos adecuados para root"

    print_message "SUCCESS" "Instalación para root completada"
}

# Ejecutar la función principal
install_zsh_main